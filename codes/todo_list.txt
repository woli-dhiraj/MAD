import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Todo List',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const TodoApp(),
    );
  }
}

class TodoApp extends StatefulWidget {
  const TodoApp({super.key});

  @override
  State<TodoApp> createState() => _TodoAppState();
}

class _TodoAppState extends State<TodoApp> {
  List<Map<String, dynamic>> tasks = [];
  int _selectedIndex = 0;
  final TextEditingController controller = TextEditingController();

  @override
  void dispose() {
    controller.dispose();
    super.dispose();
  }

  void addTask() {
    if (controller.text.isNotEmpty) {
      setState(() {
        tasks.add({"title": controller.text, "completed": false});
      });
    }
    controller.clear();
    Navigator.pop(context);
  }

  void toggleTask(int index) {
    setState(() {
      tasks[index]["completed"] = !tasks[index]["completed"];
    });
  }

  void deleteTask(int index) {
    setState(() {
      tasks.removeAt(index);
    });
  }

  void showAddTaskDialog() {
    showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text("Add New Task:"),
          content: TextField(
            controller: controller,
            decoration: InputDecoration(
              border: OutlineInputBorder(),
              hintText: "Add Task",
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                controller.clear();
              },
              child: Text("Cancel"),
            ),
            ElevatedButton(
              onPressed: addTask,
              child: Text("Add"),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text("Todo App"),
      ),
      drawer: Drawer(
        child: ListView(
          padding: EdgeInsets.all(3.0),
          children: [
            DrawerHeader(
              child: Text("Menu"),
            ),
            ListTile(
              leading: Icon(Icons.home),
              title: Text("Home"),
              onTap: () {
                Navigator.pop(context);
              },
            ),
            ListTile(
              leading: Icon(Icons.settings),
              title: Text("Settings"),
              onTap: () {
                Navigator.pop(context);
              },
            ),
          ],
        ),
      ),
      body: (_selectedIndex == 0)
          ? (tasks.isEmpty)
              ? Center(
                  child: Text("No tasks Yet! Add a new Task"),
                )
              : ListView.builder(
                  itemCount: tasks.length,
                  itemBuilder: (context, index) {
                    return Card(
                      child: ListTile(
                        leading: IconButton(
                          onPressed: () {
                            toggleTask(index);
                          },
                          icon: Icon(
                            (tasks[index]["completed"])
                                ? Icons.check_circle
                                : Icons.radio_button_unchecked,
                            color: tasks[index]["completed"]
                                ? Colors.green
                                : Colors.grey,
                          ),
                        ),
                        title: Text(
                          tasks[index]["title"],
                          style: TextStyle(
                              decoration: tasks[index]["completed"]
                                  ? TextDecoration.lineThrough
                                  : TextDecoration.none),
                        ),
                        trailing: IconButton(
                          onPressed: () {
                            deleteTask(index);
                          },
                          icon: Icon(
                            Icons.delete,
                            color: Colors.red,
                          ),
                        ),
                      ),
                    );
                  },
                )
          : Center(
              child: Text("Settings Page"),
            ),
      floatingActionButton: FloatingActionButton(
        onPressed: showAddTaskDialog,
        child: Icon(Icons.add),
      ),
      bottomNavigationBar: BottomNavigationBar(
        items: [
          BottomNavigationBarItem(icon: Icon(Icons.list), label: "Tasks"),
          BottomNavigationBarItem(icon: Icon(Icons.settings), label: "Settings")
        ],
        currentIndex: _selectedIndex,
        onTap: (value) {
          setState(() {
            _selectedIndex = value;
          });
        },
      ),
);
}
}
